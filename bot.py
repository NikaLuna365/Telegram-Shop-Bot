import logging
import re
from aiogram import Bot, Dispatcher, executor, types
from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton
from aiogram.contrib.fsm_storage.memory import MemoryStorage
from aiogram.dispatcher import FSMContext
from aiogram.dispatcher.filters.state import State, StatesGroup  # —É–±–µ–¥–∏–º—Å—è, —á—Ç–æ –∏–º–ø–æ—Ä—Ç –∫–æ—Ä—Ä–µ–∫—Ç–µ–Ω

from config import BOT_TOKEN, ADMIN_CHAT_ID
from database import (get_categories, get_products_by_category, get_product_by_id,
                      save_order, get_user_data, save_user_data, get_orders_by_user,
                      update_order_status, add_product, get_user_id_by_tg)

logging.basicConfig(level=logging.INFO)

bot = Bot(token=BOT_TOKEN, parse_mode="HTML")
dp = Dispatcher(bot, storage=MemoryStorage())

# –ö–æ—Ä–∑–∏–Ω–∞: {user_id: {product_id: quantity}}
user_carts = {}
# –°—Ç–µ–∫ —Å–æ—Å—Ç–æ—è–Ω–∏–π –¥–ª—è –∫–Ω–æ–ø–∫–∏ "–ù–∞–∑–∞–¥": {user_id: [("handler_name", data), ...]}
user_states = {}

class OrderForm(StatesGroup):
    # –Ø–≤–Ω–æ —É–∫–∞–∑—ã–≤–∞–µ–º —Ç–∏–ø State –¥–ª—è —É—Å—Ç—Ä–∞–Ω–µ–Ω–∏—è –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–π.
    waiting_for_name: State = State()
    waiting_for_phone: State = State()
    waiting_for_address: State = State()

    # –°–æ—Å—Ç–æ—è–Ω–∏—è –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è —Ç–æ–≤–∞—Ä–∞ –∞–¥–º–∏–Ω–æ–º
    admin_add_name: State = State()
    admin_add_desc: State = State()
    admin_add_price: State = State()
    admin_add_category: State = State()
    admin_add_photo: State = State()

def push_state(user_id, handler_name, data=None):
    if user_id not in user_states:
        user_states[user_id] = []
    user_states[user_id].append((handler_name, data))

def pop_state(user_id):
    if user_id in user_states and user_states[user_id]:
        user_states[user_id].pop()

def clear_state(user_id):
    user_states[user_id] = []

def main_menu_keyboard():
    kb = InlineKeyboardMarkup()
    kb.add(InlineKeyboardButton("–ö–∞—Ç–∞–ª–æ–≥ —Ç–æ–≤–∞—Ä–æ–≤", callback_data="show_categories"))
    kb.add(InlineKeyboardButton("–ö–æ—Ä–∑–∏–Ω–∞", callback_data="show_cart"))
    kb.add(InlineKeyboardButton("–û—Ñ–æ—Ä–º–∏—Ç—å –∑–∞–∫–∞–∑", callback_data="checkout"))
    kb.add(InlineKeyboardButton("–ò—Å—Ç–æ—Ä–∏—è –∑–∞–∫–∞–∑–æ–≤", callback_data="show_history"))
    return kb

async def safe_edit_text(message: types.Message, new_text: str, new_reply_markup=None):
    """
    –ë–µ–∑–æ–ø–∞—Å–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Ç–µ–∫—Å—Ç–∞ —Å–æ–æ–±—â–µ–Ω–∏—è.
    –ï—Å–ª–∏ —Ç–µ–∫—Å—Ç –Ω–µ –º–µ–Ω—è–µ—Ç—Å—è, –Ω–µ –≤—ã–∑—ã–≤–∞–µ–º edit_text(), —á—Ç–æ–±—ã –∏–∑–±–µ–∂–∞—Ç—å MessageNotModified.
    """
    current_text = message.text
    if current_text != new_text:
        await message.edit_text(new_text, reply_markup=new_reply_markup)
    else:
        # –ï—Å–ª–∏ —Ç–µ–∫—Å—Ç –Ω–µ –∏–∑–º–µ–Ω–∏–ª—Å—è, –º–æ–∂–Ω–æ –ø—Ä–æ—Å—Ç–æ –æ–±–Ω–æ–≤–∏—Ç—å –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É, –µ—Å–ª–∏ –æ–Ω–∞ –æ—Ç–ª–∏—á–∞–µ—Ç—Å—è
        if new_reply_markup:
            await message.edit_reply_markup(new_reply_markup)

async def show_order_confirmation(origin, name, phone, address, is_message=False):
    if isinstance(origin, types.CallbackQuery):
        user_id = origin.from_user.id
    else:
        user_id = origin.from_user.id

    cart = user_carts.get(user_id, {})
    if not cart:
        if isinstance(origin, types.CallbackQuery):
            await safe_edit_text(origin.message, "–ö–æ—Ä–∑–∏–Ω–∞ –ø—É—Å—Ç–∞!")
        else:
            await origin.answer("–ö–æ—Ä–∑–∏–Ω–∞ –ø—É—Å—Ç–∞!")
        return

    total_sum = 0
    order_lines = []
    for pid, qty in cart.items():
        product = get_product_by_id(pid)
        if product:
            _, pname, pprice, pdesc, pimg, pcat = product
            sum_line = pprice * qty
            total_sum += sum_line
            order_lines.append(f"{pname} - {qty} —à—Ç. - {sum_line} —Ä—É–±.")

    text = "üì¶ –í–∞—à –∑–∞–∫–∞–∑:\n"
    for l in order_lines:
        text += f"{l}\n"
    text += f"–û–±—â–∞—è —Å—É–º–º–∞: {total_sum} —Ä—É–±.\n"
    text += f"–ö–æ–Ω—Ç–∞–∫—Ç: {name}, {phone}\n–ê–¥—Ä–µ—Å –¥–æ—Å—Ç–∞–≤–∫–∏: {address}\n–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å –∑–∞–∫–∞–∑?"

    kb = InlineKeyboardMarkup()
    kb.add(InlineKeyboardButton("–î–∞", callback_data="confirm_order"))
    kb.add(InlineKeyboardButton("–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å", callback_data="edit_order"))
    kb.add(InlineKeyboardButton("–ù–∞–∑–∞–¥", callback_data="go_back"), InlineKeyboardButton("–í –Ω–∞—á–∞–ª–æ", callback_data="go_main"))

    push_state(user_id, "checkout_handler")

    if is_message:
        await origin.answer(text, reply_markup=kb)
    else:
        await safe_edit_text(origin.message, text, kb)

@dp.message_handler(commands=['start'])
async def start_command(message: types.Message):
    clear_state(message.from_user.id)
    await message.answer("–ü—Ä–∏–≤–µ—Ç! –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –Ω–∞—à –º–∞–≥–∞–∑–∏–Ω. –í—ã–±–µ—Ä–∏—Ç–µ, —á—Ç–æ –≤–∞—Å –∏–Ω—Ç–µ—Ä–µ—Å—É–µ—Ç:", reply_markup=main_menu_keyboard())

@dp.message_handler(commands=['history'])
async def history_command(message: types.Message):
    orders = get_orders_by_user(message.from_user.id, limit=5)
    if not orders:
        kb = InlineKeyboardMarkup()
        kb.add(InlineKeyboardButton("–ü–µ—Ä–µ–π—Ç–∏ –≤ –∫–∞—Ç–∞–ª–æ–≥", callback_data="show_categories"))
        await message.answer("–£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç –∑–∞–∫–∞–∑–æ–≤.", reply_markup=kb)
    else:
        text = "üõí –ò—Å—Ç–æ—Ä–∏—è –∑–∞–∫–∞–∑–æ–≤:\n"
        idx = 1
        for o in orders:
            order_date, order_details, total_price = o
            text += f"{idx}. {order_date}: {order_details}\n–ò—Ç–æ–≥–æ: {total_price} —Ä—É–±.\n\n"
            idx += 1
        kb = InlineKeyboardMarkup()
        kb.add(InlineKeyboardButton("–í –Ω–∞—á–∞–ª–æ", callback_data="go_main"))
        await message.answer(text, reply_markup=kb)

@dp.callback_query_handler(lambda c: c.data == "show_history")
async def show_history_handler(callback_query: types.CallbackQuery):
    orders = get_orders_by_user(callback_query.from_user.id, limit=5)
    if not orders:
        kb = InlineKeyboardMarkup()
        kb.add(InlineKeyboardButton("–ü–µ—Ä–µ–π—Ç–∏ –≤ –∫–∞—Ç–∞–ª–æ–≥", callback_data="show_categories"))
        await safe_edit_text(callback_query.message, "–£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç –∑–∞–∫–∞–∑–æ–≤.", kb)
    else:
        text = "üõí –ò—Å—Ç–æ—Ä–∏—è –∑–∞–∫–∞–∑–æ–≤:\n"
        idx = 1
        for o in orders:
            order_date, order_details, total_price = o
            text += f"{idx}. {order_date}: {order_details}\n–ò—Ç–æ–≥–æ: {total_price} —Ä—É–±.\n\n"
            idx += 1
        kb = InlineKeyboardMarkup()
        kb.add(InlineKeyboardButton("–ù–∞–∑–∞–¥", callback_data="go_back"), InlineKeyboardButton("–í –Ω–∞—á–∞–ª–æ", callback_data="go_main"))
        push_state(callback_query.from_user.id, "show_history_handler")
        await safe_edit_text(callback_query.message, text, kb)

@dp.callback_query_handler(lambda c: c.data == "go_main")
async def go_main_handler(callback_query: types.CallbackQuery):
    clear_state(callback_query.from_user.id)
    await safe_edit_text(callback_query.message, "–í—ã–±–µ—Ä–∏—Ç–µ, —á—Ç–æ –≤–∞—Å –∏–Ω—Ç–µ—Ä–µ—Å—É–µ—Ç:", main_menu_keyboard())

@dp.callback_query_handler(lambda c: c.data == "go_back")
async def go_back_handler(callback_query: types.CallbackQuery):
    user_id = callback_query.from_user.id
    if len(user_states.get(user_id, [])) > 1:
        pop_state(user_id)
        prev = user_states[user_id][-1]
        handler_name, data = prev
        if handler_name == "show_categories_handler":
            await show_categories_handler(callback_query)
        elif handler_name == "show_products_handler":
            category = data
            await show_products(callback_query, category)
        elif handler_name == "view_product_handler":
            product_id, category = data
            await view_product(callback_query, product_id, category)
        elif handler_name == "show_cart_handler":
            await show_cart(callback_query)
        elif handler_name == "checkout_handler":
            await safe_edit_text(callback_query.message, "–í—ã–±–µ—Ä–∏—Ç–µ, —á—Ç–æ –≤–∞—Å –∏–Ω—Ç–µ—Ä–µ—Å—É–µ—Ç:", main_menu_keyboard())
        elif handler_name == "show_history_handler":
            await show_history_handler(callback_query)
        else:
            await go_main_handler(callback_query)
    else:
        await go_main_handler(callback_query)

@dp.callback_query_handler(lambda c: c.data == "show_categories")
async def show_categories_handler(callback_query: types.CallbackQuery):
    categories = get_categories()
    if not categories:
        await safe_edit_text(callback_query.message, "–ö–∞—Ç–∞–ª–æ–≥ –ø—É—Å—Ç.", main_menu_keyboard())
        return
    kb = InlineKeyboardMarkup()
    for cat in categories:
        kb.add(InlineKeyboardButton(cat, callback_data=f"cat_{cat}"))
    kb.add(InlineKeyboardButton("–ù–∞–∑–∞–¥", callback_data="go_back"), InlineKeyboardButton("–í –Ω–∞—á–∞–ª–æ", callback_data="go_main"))
    push_state(callback_query.from_user.id, "show_categories_handler")
    await safe_edit_text(callback_query.message, "–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é:", kb)

async def show_products(callback_query: types.CallbackQuery, category: str):
    products = get_products_by_category(category)
    if not products:
        await safe_edit_text(callback_query.message, "–í —ç—Ç–æ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –ø–æ–∫–∞ –Ω–µ—Ç —Ç–æ–≤–∞—Ä–æ–≤.", main_menu_keyboard())
        return

    text = f"–ö–∞—Ç–µ–≥–æ—Ä–∏—è: {category}\n"
    kb = InlineKeyboardMarkup()
    for p in products:
        p_id, name, price, desc, img_url = p
        text += f"{p_id}. {name} - {price} —Ä—É–±.\n"
        kb.add(
            InlineKeyboardButton(f"–ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å {p_id}", callback_data=f"view_{p_id}_{category}"),
            InlineKeyboardButton(f"–í –∫–æ—Ä–∑–∏–Ω—É {p_id}", callback_data=f"add_{p_id}")
        )
    kb.add(InlineKeyboardButton("–ù–∞–∑–∞–¥", callback_data="go_back"), InlineKeyboardButton("–í –Ω–∞—á–∞–ª–æ", callback_data="go_main"))
    push_state(callback_query.from_user.id, "show_products_handler", category)
    await safe_edit_text(callback_query.message, text, kb)

@dp.callback_query_handler(lambda c: c.data.startswith("cat_"))
async def category_selected(callback_query: types.CallbackQuery):
    category = callback_query.data.split("cat_")[1]
    await show_products(callback_query, category)

async def view_product(callback_query: types.CallbackQuery, product_id: int, category: str):
    product = get_product_by_id(product_id)
    if not product:
        await callback_query.answer("–¢–æ–≤–∞—Ä –Ω–µ –Ω–∞–π–¥–µ–Ω.")
        return
    p_id, name, price, desc, img_url, cat = product
    text = f"<b>{name}</b>\n–¶–µ–Ω–∞: {price} —Ä—É–±.\n–û–ø–∏—Å–∞–Ω–∏–µ: {desc}"
    kb = InlineKeyboardMarkup()
    kb.add(InlineKeyboardButton("–î–æ–±–∞–≤–∏—Ç—å –≤ –∫–æ—Ä–∑–∏–Ω—É", callback_data=f"add_{p_id}"))
    kb.add(InlineKeyboardButton("–ù–∞–∑–∞–¥", callback_data="go_back"), InlineKeyboardButton("–í –Ω–∞—á–∞–ª–æ", callback_data="go_main"))
    push_state(callback_query.from_user.id, "view_product_handler", (p_id, cat))
    await safe_edit_text(callback_query.message, text, kb)

@dp.callback_query_handler(lambda c: c.data.startswith("view_"))
async def view_product_handler(callback_query: types.CallbackQuery):
    parts = callback_query.data.split("_")
    product_id = int(parts[1])
    category = parts[2]
    await view_product(callback_query, product_id, category)

@dp.callback_query_handler(lambda c: c.data.startswith("add_"))
async def add_to_cart_handler(callback_query: types.CallbackQuery):
    user_id = callback_query.from_user.id
    product_id = int(callback_query.data.split("add_")[1])
    if user_id not in user_carts:
        user_carts[user_id] = {}
    cart = user_carts[user_id]
    cart[product_id] = cart.get(product_id, 0) + 1
    await callback_query.answer("–¢–æ–≤–∞—Ä –¥–æ–±–∞–≤–ª–µ–Ω –≤ –∫–æ—Ä–∑–∏–Ω—É!")

@dp.callback_query_handler(lambda c: c.data == "show_cart")
async def show_cart_handler(callback_query: types.CallbackQuery):
    await show_cart(callback_query)

async def show_cart(callback_query: types.CallbackQuery):
    user_id = callback_query.from_user.id
    cart = user_carts.get(user_id, {})
    if not cart:
        kb = InlineKeyboardMarkup()
        kb.add(InlineKeyboardButton("–ü–µ—Ä–µ–π—Ç–∏ –≤ –∫–∞—Ç–∞–ª–æ–≥", callback_data="show_categories"))
        kb.add(InlineKeyboardButton("–í –Ω–∞—á–∞–ª–æ", callback_data="go_main"))
        push_state(user_id, "show_cart_handler")
        await safe_edit_text(callback_query.message, "–í–∞—à–∞ –∫–æ—Ä–∑–∏–Ω–∞ –ø—É—Å—Ç–∞. –î–æ–±–∞–≤—å—Ç–µ —Ç–æ–≤–∞—Ä—ã –∏–∑ –∫–∞—Ç–∞–ª–æ–≥–∞!", kb)
        return

    text = "üõí –í–∞—à–∞ –∫–æ—Ä–∑–∏–Ω–∞:\n"
    total_sum = 0
    kb = InlineKeyboardMarkup()
    index = 1
    for pid, qty in cart.items():
        product = get_product_by_id(pid)
        if product:
            p_id, name, price, desc, img_url, category = product
            sum_line = price * qty
            total_sum += sum_line
            text += f"{index}. {name} - {qty} —à—Ç. - {sum_line} —Ä—É–±.\n"
            kb.add(
                InlineKeyboardButton("+", callback_data=f"inc_{p_id}"),
                InlineKeyboardButton("-", callback_data=f"dec_{p_id}")
            )
            index += 1
    text += f"–û–±—â–∞—è —Å—É–º–º–∞: {total_sum} —Ä—É–±."
    kb.add(InlineKeyboardButton("–û—Ñ–æ—Ä–º–∏—Ç—å –∑–∞–∫–∞–∑", callback_data="checkout"))
    kb.add(InlineKeyboardButton("–ù–∞–∑–∞–¥", callback_data="go_back"), InlineKeyboardButton("–í –Ω–∞—á–∞–ª–æ", callback_data="go_main"))
    push_state(user_id, "show_cart_handler")
    await safe_edit_text(callback_query.message, text, kb)

@dp.callback_query_handler(lambda c: c.data.startswith("inc_"))
async def increase_quantity_handler(callback_query: types.CallbackQuery):
    user_id = callback_query.from_user.id
    product_id = int(callback_query.data.split("inc_")[1])
    cart = user_carts.get(user_id, {})
    if product_id in cart:
        cart[product_id] += 1
    await show_cart(callback_query)

@dp.callback_query_handler(lambda c: c.data.startswith("dec_"))
async def decrease_quantity_handler(callback_query: types.CallbackQuery):
    user_id = callback_query.from_user.id
    product_id = int(callback_query.data.split("dec_")[1])
    cart = user_carts.get(user_id, {})
    if product_id in cart:
        cart[product_id] -= 1
        if cart[product_id] <= 0:
            del cart[product_id]
    await show_cart(callback_query)

@dp.callback_query_handler(lambda c: c.data == "checkout")
async def checkout_handler(callback_query: types.CallbackQuery):
    user_id = callback_query.from_user.id
    cart = user_carts.get(user_id, {})
    if not cart:
        await callback_query.answer("–í–∞—à–∞ –∫–æ—Ä–∑–∏–Ω–∞ –ø—É—Å—Ç–∞!")
        return
    user_info = get_user_data(user_id)
    if user_info:
        _, name, phone, address = user_info
        text = f"–í–∞—à–∏ –¥–∞–Ω–Ω—ã–µ:\n–ò–º—è: {name}\n–¢–µ–ª–µ—Ñ–æ–Ω: {phone}\n–ê–¥—Ä–µ—Å: {address}\n–ò—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å —ç—Ç–∏ –¥–∞–Ω–Ω—ã–µ?"
        kb = InlineKeyboardMarkup()
        kb.add(InlineKeyboardButton("–î–∞", callback_data="use_saved_data"))
        kb.add(InlineKeyboardButton("–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å", callback_data="edit_data"))
        kb.add(InlineKeyboardButton("–ù–∞–∑–∞–¥", callback_data="go_back"), InlineKeyboardButton("–í –Ω–∞—á–∞–ª–æ", callback_data="go_main"))
        push_state(user_id, "checkout_handler")
        await safe_edit_text(callback_query.message, text, kb)
    else:
        push_state(user_id, "checkout_handler")
        await safe_edit_text(callback_query.message, "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –≤–∞—à–µ –∏–º—è:")
        await OrderForm.waiting_for_name.set()

@dp.callback_query_handler(lambda c: c.data == "use_saved_data", state="*")
async def use_saved_data_handler(callback_query: types.CallbackQuery, state: FSMContext):
    user_id = callback_query.from_user.id
    user = get_user_data(user_id)
    if user:
        _, name, phone, address = user
        await show_order_confirmation(callback_query, name, phone, address)
    else:
        await safe_edit_text(callback_query.message, "–î–∞–Ω–Ω—ã–µ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã, –≤–≤–µ–¥–∏—Ç–µ –∑–∞–Ω–æ–≤–æ –≤–∞—à–µ –∏–º—è:")
        await OrderForm.waiting_for_name.set()

@dp.callback_query_handler(lambda c: c.data == "edit_data", state="*")
async def edit_data_handler(callback_query: types.CallbackQuery, state: FSMContext):
    await safe_edit_text(callback_query.message, "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –≤–∞—à–µ –∏–º—è:")
    await OrderForm.waiting_for_name.set()

@dp.message_handler(state=OrderForm.waiting_for_name)
async def process_name(message: types.Message, state: FSMContext):
    await state.update_data(name=message.text)
    await message.answer("–í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ –≤ —Ñ–æ—Ä–º–∞—Ç–µ +7XXXXXXXXXX:")
    await OrderForm.waiting_for_phone.set()

@dp.message_handler(state=OrderForm.waiting_for_phone)
async def process_phone(message: types.Message, state: FSMContext):
    phone = message.text.strip()
    if not re.match(r"^\+7\d{10}$", phone):
        await message.answer("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç. –í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ –≤ —Ñ–æ—Ä–º–∞—Ç–µ +7XXXXXXXXXX:")
        return
    await state.update_data(phone=phone)
    await message.answer("–í–≤–µ–¥–∏—Ç–µ –∞–¥—Ä–µ—Å –¥–æ—Å—Ç–∞–≤–∫–∏:")
    await OrderForm.waiting_for_address.set()

@dp.message_handler(state=OrderForm.waiting_for_address)
async def process_address(message: types.Message, state: FSMContext):
    data = await state.get_data()
    name = data['name']
    phone = data['phone']
    address = message.text
    save_user_data(message.from_user.id, name, phone, address)
    await state.finish()
    await show_order_confirmation(message, name, phone, address, is_message=True)

@dp.callback_query_handler(lambda c: c.data == "edit_order")
async def edit_order_handler(callback_query: types.CallbackQuery):
    await show_cart(callback_query)

@dp.callback_query_handler(lambda c: c.data == "confirm_order")
async def confirm_order_handler(callback_query: types.CallbackQuery):
    user_id = callback_query.from_user.id
    user_info = get_user_data(user_id)
    if not user_info:
        await safe_edit_text(callback_query.message, "–î–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–µ –Ω–∞–π–¥–µ–Ω—ã, –ø–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏—Ç–µ –∑–∞–∫–∞–∑.")
        return
    _, name, phone, address = user_info
    cart = user_carts.get(user_id, {})
    if not cart:
        await safe_edit_text(callback_query.message, "–ö–æ—Ä–∑–∏–Ω–∞ –ø—É—Å—Ç–∞!")
        return
    total_sum = 0
    order_lines = []
    for pid, qty in cart.items():
        product = get_product_by_id(pid)
        if product:
            _, pname, pprice, pdesc, pimg, pcat = product
            sum_line = pprice * qty
            total_sum += sum_line
            order_lines.append(f"{pname} - {qty} —à—Ç. - {sum_line} —Ä—É–±.")
    order_details = "\n".join(order_lines)
    user_db_id = get_user_id_by_tg(user_id)
    order_id = save_order(user_db_id, name, phone, address, order_details, total_sum)

    admin_text = f"–ù–æ–≤—ã–π –∑–∞–∫–∞–∑ (ID: {order_id}):\n–ò–º—è: {name}\n–¢–µ–ª–µ—Ñ–æ–Ω: {phone}\n–ê–¥—Ä–µ—Å: {address}\n–¢–æ–≤–∞—Ä—ã:\n{order_details}\n–û–±—â–∞—è —Å—É–º–º–∞: {total_sum} —Ä—É–±."
    admin_kb = InlineKeyboardMarkup()
    admin_kb.add(InlineKeyboardButton("–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å", callback_data=f"admin_confirm_{order_id}"),
                 InlineKeyboardButton("–û—Ç–∫–ª–æ–Ω–∏—Ç—å", callback_data=f"admin_decline_{order_id}"))
    await bot.send_message(chat_id=ADMIN_CHAT_ID, text=admin_text, reply_markup=admin_kb)

    user_carts[user_id] = {}
    clear_state(user_id)
    await safe_edit_text(callback_query.message, "–í–∞—à –∑–∞–∫–∞–∑ –æ—Ñ–æ—Ä–º–ª–µ–Ω! –°–ø–∞—Å–∏–±–æ –∑–∞ –ø–æ–∫—É–ø–∫—É!", main_menu_keyboard())

@dp.callback_query_handler(lambda c: c.data.startswith("admin_confirm_"))
async def admin_confirm_order(callback_query: types.CallbackQuery):
    if callback_query.from_user.id != ADMIN_CHAT_ID:
        await callback_query.answer("–ù–µ—Ç –ø—Ä–∞–≤", show_alert=True)
        return
    order_id = int(callback_query.data.split("admin_confirm_")[1])
    update_order_status(order_id, "–ü—Ä–∏–Ω—è—Ç")
    await safe_edit_text(callback_query.message, "–ó–∞–∫–∞–∑ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥—ë–Ω!")

@dp.callback_query_handler(lambda c: c.data.startswith("admin_decline_"))
async def admin_decline_order(callback_query: types.CallbackQuery):
    if callback_query.from_user.id != ADMIN_CHAT_ID:
        await callback_query.answer("–ù–µ—Ç –ø—Ä–∞–≤", show_alert=True)
        return
    order_id = int(callback_query.data.split("admin_decline_")[1])
    update_order_status(order_id, "–û—Ç–∫–ª–æ–Ω—ë–Ω")
    await safe_edit_text(callback_query.message, "–ó–∞–∫–∞–∑ –æ—Ç–∫–ª–æ–Ω—ë–Ω.")

@dp.message_handler(commands=['add_product'])
async def add_product_command(message: types.Message):
    if message.from_user.id != ADMIN_CHAT_ID:
        await message.answer("–£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –Ω–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ —Ç–æ–≤–∞—Ä–æ–≤.")
        return
    await message.answer("–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞:")
    await OrderForm.admin_add_name.set()

@dp.message_handler(state=OrderForm.admin_add_name)
async def admin_add_name_handler(message: types.Message, state: FSMContext):
    await state.update_data(name=message.text)
    await message.answer("–í–≤–µ–¥–∏—Ç–µ –æ–ø–∏—Å–∞–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞:")
    await OrderForm.admin_add_desc.set()

@dp.message_handler(state=OrderForm.admin_add_desc)
async def admin_add_desc_handler(message: types.Message, state: FSMContext):
    await state.update_data(description=message.text)
    await message.answer("–í–≤–µ–¥–∏—Ç–µ —Ü–µ–Ω—É —Ç–æ–≤–∞—Ä–∞ (—á–∏—Å–ª–æ):")
    await OrderForm.admin_add_price.set()

@dp.message_handler(lambda msg: not msg.text.isdigit(), state=OrderForm.admin_add_price)
async def admin_add_price_error(message: types.Message, state: FSMContext):
    await message.answer("–¶–µ–Ω–∞ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å —á–∏—Å–ª–æ–º, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â—ë —Ä–∞–∑:")

@dp.message_handler(lambda msg: msg.text.isdigit(), state=OrderForm.admin_add_price)
async def admin_add_price_handler(message: types.Message, state: FSMContext):
    await state.update_data(price=int(message.text))
    await message.answer("–í–≤–µ–¥–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é —Ç–æ–≤–∞—Ä–∞:")
    await OrderForm.admin_add_category.set()

@dp.message_handler(state=OrderForm.admin_add_category)
async def admin_add_category_handler(message: types.Message, state: FSMContext):
    await state.update_data(category=message.text)
    await message.answer("–û—Ç–ø—Ä–∞–≤—å—Ç–µ —Ñ–æ—Ç–æ —Ç–æ–≤–∞—Ä–∞ –∏–ª–∏ –Ω–∞–ø–∏—à–∏—Ç–µ '–Ω–µ—Ç', –µ—Å–ª–∏ –±–µ–∑ —Ñ–æ—Ç–æ:")
    await OrderForm.admin_add_photo.set()

@dp.message_handler(state=OrderForm.admin_add_photo, content_types=['photo', 'text'])
async def admin_add_photo_handler(message: types.Message, state: FSMContext):
    data = await state.get_data()
    name = data['name']
    desc = data['description']
    price = data['price']
    category = data['category']
    image_url = None
    if message.photo:
        image_url = message.photo[-1].file_id
    elif message.text.lower() == '–Ω–µ—Ç':
        image_url = None

    add_product(name, price, desc, category, image_url)
    await message.answer("–¢–æ–≤–∞—Ä —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω!")
    await state.finish()

if __name__ == '__main__':
    executor.start_polling(dp, skip_updates=True)
